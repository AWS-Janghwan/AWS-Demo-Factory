import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { 
  generateAnalyticsInsights, 
  generateContentAnalysis, 
  generateAuthorAnalysis 
} from './bedrockClient';

// PDF ÏÑ§Ï†ï
const PDF_CONFIG = {
  format: 'a4',
  orientation: 'portrait',
  unit: 'mm',
  margins: {
    top: 20,
    left: 20,
    right: 20,
    bottom: 20
  },
  colors: {
    primary: '#232F3E',
    secondary: '#FF9900',
    text: '#333333',
    lightGray: '#F5F5F5',
    darkGray: '#666666'
  },
  fonts: {
    title: 16,
    subtitle: 14,
    body: 10,
    small: 8
  }
};

/**
 * AI Í∏∞Î∞ò Ï†ÑÏ≤¥ Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
 */
export const generateAIAnalyticsReport = async (analyticsData, existingInsights = null) => {
  try {
    console.log('ü§ñ AI Í∏∞Î∞ò Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏãúÏûë...');
    
    // 1. AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± ÎòêÎäî Í∏∞Ï°¥ Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÇ¨Ïö©
    let aiInsights;
    if (existingInsights) {
      console.log('üîÑ Í∏∞Ï°¥ AI Ïù∏ÏÇ¨Ïù¥Ìä∏ Ïû¨ÏÇ¨Ïö©...');
      aiInsights = existingInsights;
    } else {
      console.log('üîç AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± Ï§ë...');
      aiInsights = await generateAnalyticsInsights(analyticsData);
    }
    
    // 2. Ï∂îÍ∞Ä Î∂ÑÏÑù ÏÉùÎûµ (Ïù¥ÎØ∏ AI Ïù∏ÏÇ¨Ïù¥Ìä∏Ïóê Î™®Îì† Î∂ÑÏÑù Ìè¨Ìï®Îê®)
    console.log('‚ÑπÔ∏è Ï∂îÍ∞Ä Bedrock Ìò∏Ï∂ú ÏÉùÎûµ - AI Ïù∏ÏÇ¨Ïù¥Ìä∏Ïóê Ïù¥ÎØ∏ Ìè¨Ìï®Îê®');
    
    // 4. PDF ÏÉùÏÑ±
    console.log('üìÑ PDF Î¨∏ÏÑú ÏÉùÏÑ± Ï§ë...');
    const doc = new jsPDF(PDF_CONFIG.orientation, PDF_CONFIG.unit, PDF_CONFIG.format);
    
    // Ìó§Îçî Ï∂îÍ∞Ä
    let yPos = await addEnglishHeader(doc, 'AWS Demo Factory AI Analytics Report');
    
    // Chart.js ÎèôÏ†Å Î°úÎìú
    console.log('üìä Chart.js Î°úÎìú Ï§ë...');
    const Chart = await loadChartJS();
    console.log('‚úÖ Chart.js ÎèôÏ†Å Î°úÎìú ÏôÑÎ£º');
    
    // AI Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º ÏÑπÏÖòÎ≥ÑÎ°ú Î∂ÑÎ¶¨
    const insightSections = extractInsightSections(aiInsights.summary);
    
    // 1. Ï†ÑÏ≤¥ ÌòÑÌô© ÏöîÏïΩ ÏÑπÏÖò
    yPos = await addEnglishSectionTitle(doc, 'üìä Overall Statistics Analysis', yPos);
    if (insightSections.overview) {
      yPos = await addKoreanTextAsImage(doc, insightSections.overview, 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
      yPos += 10;
    }
    
    // Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï∞®Ìä∏
    if (analyticsData.summary) {
      yPos = await addChartSectionTitle(doc, 'Overall Statistics Chart', 'Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï∞®Ìä∏', yPos);
      const summaryChart = await createSummaryChart(analyticsData.summary, Chart);
      if (summaryChart) {
        yPos = await addChartToDoc(doc, summaryChart, yPos, 'Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ');
      }
      yPos += 20;
    }
    
    // 2. Ï†ëÏÜç Î™©Ï†Å Î∂ÑÏÑù ÏÑπÏÖò
    yPos = await addEnglishSectionTitle(doc, 'üéØ Access Purpose Analysis', yPos);
    if (insightSections.accessPurpose) {
      yPos = await addKoreanTextAsImage(doc, insightSections.accessPurpose, 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
      yPos += 10;
    }
    
    // Ï†ëÏÜç Î™©Ï†Å Ï∞®Ìä∏
    if (analyticsData.accessPurpose && analyticsData.accessPurpose.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Access Purpose Chart', 'Ï†ëÏÜç Î™©Ï†Å Ï∞®Ìä∏', yPos);
      const purposeChart = await createAccessPurposeChart(analyticsData.accessPurpose, Chart);
      if (purposeChart) {
        yPos = await addChartToDoc(doc, purposeChart, yPos, 'Ï†ëÏÜç Î™©Ï†Å Î∂ÑÏÑù');
      }
      yPos += 20;
    }
    
    // 3. ÏΩòÌÖêÏ∏† Î∂ÑÏÑù ÏÑπÏÖò
    yPos = await addEnglishSectionTitle(doc, 'üìÑ Content Analysis', yPos);
    if (insightSections.content) {
      yPos = await addKoreanTextAsImage(doc, insightSections.content, 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
      yPos += 10;
    }
    
    // ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Ï∞®Ìä∏
    if (analyticsData.content && analyticsData.content.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Content Analysis Chart', 'ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Ï∞®Ìä∏', yPos);
      const contentChart = await createContentChart(analyticsData.content, Chart);
      if (contentChart) {
        yPos = await addChartToDoc(doc, contentChart, yPos, 'ÏΩòÌÖêÏ∏† Î∂ÑÏÑù');
      }
      yPos += 20;
    }
    
    // 4. Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù ÏÑπÏÖò
    yPos = await addEnglishSectionTitle(doc, 'üìÇ Category Analysis', yPos);
    if (insightSections.category) {
      yPos = await addKoreanTextAsImage(doc, insightSections.category, 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
      yPos += 10;
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù Ï∞®Ìä∏
    if (analyticsData.category && analyticsData.category.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Category Analysis Chart', 'Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù Ï∞®Ìä∏', yPos);
      const categoryChart = await createCategoryChart(analyticsData.category, Chart);
      if (categoryChart) {
        yPos = await addChartToDoc(doc, categoryChart, yPos, 'Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù');
      }
      yPos += 20;
    }
    
    // 5. ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù ÏÑπÏÖò
    yPos = await addEnglishSectionTitle(doc, '‚è∞ Time Analysis', yPos);
    if (insightSections.time) {
      yPos = await addKoreanTextAsImage(doc, insightSections.time, 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
      yPos += 10;
    }
    
    // ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏
    if (analyticsData.time && analyticsData.time.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Time Analysis Chart', 'ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏', yPos);
      const timeChart = await createTimeChart(analyticsData.time, Chart);
      if (timeChart) {
        yPos = await addChartToDoc(doc, timeChart, yPos, 'ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù');
      }
      yPos += 20;
    }
    
    // 6. Ï†ÑÎûµÏ†Å Í∂åÏû•ÏÇ¨Ìï≠ ÏÑπÏÖò
    if (insightSections.recommendations) {
      yPos = await addEnglishSectionTitle(doc, 'üí° Strategic Recommendations', yPos);
      yPos = await addKoreanTextAsImage(doc, insightSections.recommendations, 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
    }
    
    // Ìë∏ÌÑ∞ Ï∂îÍ∞Ä
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on ${new Date().toLocaleString()}`, 20, 280);
    doc.text('AWS Demo Factory AI Analytics Report', 150, 280);
    
    // PDF Ï†ÄÏû•
    const fileName = `AWS_Demo_Factory_AI_Report_${new Date().toISOString().slice(0, 19).replace(/:/g, '')}.pdf`;
    doc.save(fileName);
    
    console.log('‚úÖ AI PDF ÏÉùÏÑ± ÏôÑÎ£å:', fileName);
    
    return {
      success: true,
      fileName: fileName,
      message: 'AI Í∏∞Î∞ò Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.'
    };
    
  } catch (error) {
    console.error('‚ùå AI PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Ï∞®Ìä∏Îßå Ìè¨Ìï®Îêú Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± (AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏóÜÏùå)
 */
export const generateChartOnlyReport = async (analyticsData, insightsText = null) => {
  try {
    console.log('üìä Ï∞®Ìä∏ Ï†ÑÏö© Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏãúÏûë...');
    
    // Chart.js ÎèôÏ†Å Î°úÎìú
    const Chart = await loadChartJS();
    console.log('‚úÖ Chart.js ÎèôÏ†Å Î°úÎìú ÏôÑÎ£å');
    
    // PDF Î¨∏ÏÑú ÏÉùÏÑ±
    const doc = new jsPDF(PDF_CONFIG.orientation, PDF_CONFIG.unit, PDF_CONFIG.format);
    
    // Ìó§Îçî Ï∂îÍ∞Ä (ÏòÅÎ¨∏ÏúºÎ°ú)
    let yPos = await addEnglishHeader(doc, 'AWS Demo Factory Analytics Report');
    
    // AI Ïù∏ÏÇ¨Ïù¥Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä (ÌïúÍ∏Ä ÌÖçÏä§Ìä∏Îäî Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò)
    if (insightsText) {
      yPos = await addEnglishSectionTitle(doc, 'AI Generated Insights', yPos);
      yPos = await addKoreanTextAsImage(doc, insightsText.substring(0, 500) + '...', 20, yPos, {
        fontSize: 10,
        maxWidth: 170
      });
      yPos += 20;
    }
    
    // 1. Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï∞®Ìä∏
    if (analyticsData.summary) {
      yPos = await addChartSectionTitle(doc, 'Overall Statistics', 'Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ', yPos);
      const summaryChart = await createSummaryChart(analyticsData.summary, Chart);
      if (summaryChart) {
        yPos = await addChartToDoc(doc, summaryChart, yPos, 'Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ');
      }
      yPos += 10;
    }
    
    // 2. Ï†ëÏÜç Î™©Ï†Å Ï∞®Ìä∏
    if (analyticsData.accessPurpose && analyticsData.accessPurpose.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Access Purpose Analysis', 'Ï†ëÏÜç Î™©Ï†Å Î∂ÑÏÑù', yPos);
      const purposeChart = await createAccessPurposeChart(analyticsData.accessPurpose, Chart);
      if (purposeChart) {
        yPos = await addChartToDoc(doc, purposeChart, yPos, 'Ï†ëÏÜç Î™©Ï†Å Î∂ÑÏÑù');
      }
      yPos += 10;
    }
    
    // 3. ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Ï∞®Ìä∏
    if (analyticsData.content && analyticsData.content.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Content Analysis', 'ÏΩòÌÖêÏ∏† Î∂ÑÏÑù', yPos);
      const contentChart = await createContentChart(analyticsData.content, Chart);
      if (contentChart) {
        yPos = await addChartToDoc(doc, contentChart, yPos, 'ÏΩòÌÖêÏ∏† Î∂ÑÏÑù');
      }
      yPos += 10;
    }
    
    // 4. Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù Ï∞®Ìä∏
    if (analyticsData.category && analyticsData.category.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Category Analysis', 'Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù', yPos);
      const categoryChart = await createCategoryChart(analyticsData.category, Chart);
      if (categoryChart) {
        yPos = await addChartToDoc(doc, categoryChart, yPos, 'Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù');
      }
      yPos += 10;
    }
    
    // 5. ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏
    if (analyticsData.time && analyticsData.time.length > 0) {
      yPos = await addChartSectionTitle(doc, 'Time Analysis', 'ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù', yPos);
      const timeChart = await createTimeChart(analyticsData.time, Chart);
      if (timeChart) {
        yPos = await addChartToDoc(doc, timeChart, yPos, 'ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù');
      }
    }
    
    // Ìë∏ÌÑ∞ Ï∂îÍ∞Ä
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on ${new Date().toLocaleString()}`, 20, 280);
    doc.text('AWS Demo Factory Analytics Report', 150, 280);
    
    // PDF Ï†ÄÏû•
    const fileName = `AWS_Demo_Factory_Chart_Report_${new Date().toISOString().slice(0, 19).replace(/:/g, '')}.pdf`;
    doc.save(fileName);
    
    console.log('‚úÖ Ï∞®Ìä∏ Ï†ÑÏö© PDF ÏÉùÏÑ± ÏôÑÎ£å:', fileName);
    
    return {
      success: true,
      fileName: fileName,
      message: 'Ï∞®Ìä∏Í∞Ä Ìè¨Ìï®Îêú Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.'
    };
    
  } catch (error) {
    console.error('‚ùå Ï∞®Ìä∏ Ï†ÑÏö© PDF ÏÉùÏÑ± Ïã§Ìå®:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * ÏòÅÎ¨∏ Ìó§Îçî Ï∂îÍ∞Ä
 */
const addEnglishHeader = async (doc, title) => {
  // Î∞∞Í≤ΩÏÉâ ÏÑ§Ï†ï
  doc.setFillColor(35, 47, 62); // AWS Dark Blue
  doc.rect(0, 0, 210, 40, 'F');
  
  // Ï†úÎ™©
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.text(title, 20, 25);
  
  // ÏÉùÏÑ± ÎÇ†Ïßú
  doc.setFontSize(10);
  doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 35);
  
  return 50;
};

/**
 * ÏòÅÎ¨∏ ÏÑπÏÖò ÌÉÄÏù¥ÌãÄ Ï∂îÍ∞Ä
 */
const addEnglishSectionTitle = async (doc, title, yPos) => {
  // ÌéòÏù¥ÏßÄ ÎÑòÍπÄ Ï≤¥ÌÅ¨
  if (yPos > 250) {
    doc.addPage();
    yPos = 30;
  }
  
  doc.setTextColor(255, 153, 0); // AWS Orange
  doc.setFontSize(14);
  doc.text(title, 20, yPos);
  
  return yPos + 15;
};

/**
 * Markdown ÌÖçÏä§Ìä∏Î•º ÌååÏã±ÌïòÏó¨ Ïä§ÌÉÄÏùºÎßÅ Ï†ÅÏö©
 */
const parseMarkdownText = (text) => {
  // Markdown ÏöîÏÜåÎì§ÏùÑ Ïä§ÌÉÄÏùºÎßÅÍ≥º Ìï®Íªò ÌååÏã±
  const lines = text.split('\n');
  const parsedLines = [];
  
  lines.forEach(line => {
    const trimmed = line.trim();
    if (!trimmed) {
      parsedLines.push({ type: 'space', content: '', style: {} });
      return;
    }
    
    // Ìó§Îçî Ï≤òÎ¶¨
    if (trimmed.startsWith('# ')) {
      parsedLines.push({
        type: 'header1',
        content: trimmed.substring(2),
        style: { fontSize: 16, fontWeight: 'bold', color: '#FF9900', marginBottom: 8 }
      });
    } else if (trimmed.startsWith('## ')) {
      parsedLines.push({
        type: 'header2',
        content: trimmed.substring(3),
        style: { fontSize: 14, fontWeight: 'bold', color: '#232F3E', marginBottom: 6 }
      });
    } else if (trimmed.startsWith('### ')) {
      parsedLines.push({
        type: 'header3',
        content: trimmed.substring(4),
        style: { fontSize: 12, fontWeight: 'bold', color: '#333333', marginBottom: 4 }
      });
    } else if (trimmed.startsWith('- ') || trimmed.startsWith('* ')) {
      // Î¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú
      parsedLines.push({
        type: 'listItem',
        content: '‚Ä¢ ' + trimmed.substring(2),
        style: { fontSize: 10, marginLeft: 10, marginBottom: 2 }
      });
    } else if (trimmed.match(/^\d+\. /)) {
      // Ïà´Ïûê Î¶¨Ïä§Ìä∏
      parsedLines.push({
        type: 'numberedItem',
        content: trimmed,
        style: { fontSize: 10, marginLeft: 10, marginBottom: 2 }
      });
    } else {
      // ÏùºÎ∞ò ÌÖçÏä§Ìä∏
      let content = trimmed;
      let style = { fontSize: 10, marginBottom: 3 };
      
      // Î≥ºÎìú Ï≤òÎ¶¨
      if (content.includes('**')) {
        style.fontWeight = 'bold';
        content = content.replace(/\*\*(.*?)\*\*/g, '$1');
      }
      
      parsedLines.push({
        type: 'paragraph',
        content: content,
        style: style
      });
    }
  });
  
  return parsedLines;
};

/**
 * Í∞úÏÑ†Îêú ÌïúÍ∏Ä ÌÖçÏä§Ìä∏Î•º Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôòÌïòÏó¨ PDFÏóê Ï∂îÍ∞Ä (Markdown ÏßÄÏõê)
 */
const addKoreanTextAsImage = async (doc, text, x, y, options = {}) => {
  const {
    fontSize = 12,
    fontWeight = 'normal',
    color = '#333333',
    maxWidth = 170,
    lineHeight = 1.5
  } = options;

  console.log(`üá∞üá∑ ÌïúÍ∏Ä ÌÖçÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò ÏãúÏûë:`, {
    text: text.substring(0, 50) + '...',
    fontSize,
    maxWidth,
    position: { x, y }
  });

  try {
    // Markdown ÌååÏã±
    const parsedLines = parseMarkdownText(text);
    console.log(`üìã Markdown ÌååÏã± ÏôÑÎ£å: ${parsedLines.length}Ï§Ñ`);
    
    // ÌïúÍ∏ÄÏù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    const hasKorean = /[Í∞Ä-Ìû£]/.test(text);
    if (!hasKorean) {
      console.log('‚ÑπÔ∏è ÌïúÍ∏ÄÏù¥ ÏóÜÏñ¥ÏÑú Í∏∞Î≥∏ ÌÖçÏä§Ìä∏Î°ú Ï≤òÎ¶¨');
      doc.setTextColor(parseInt(color.slice(1, 3), 16), parseInt(color.slice(3, 5), 16), parseInt(color.slice(5, 7), 16));
      doc.setFontSize(fontSize);
      doc.text(text, x, y);
      return y + fontSize + 5;
    }
    
    // ÌÖçÏä§Ìä∏Î•º Ï§Ñ Îã®ÏúÑÎ°ú Î∂ÑÌï† (Îçî ÏßÄÎä•Ï†ÅÏúºÎ°ú)
    const lines = [];
    const words = text.split(/\s+/);
    let currentLine = '';
    
    // ÏûÑÏãú Ï∫îÎ≤ÑÏä§Î°ú ÌÖçÏä§Ìä∏ ÌÅ¨Í∏∞ Ï∏°Ï†ï
    const tempCanvas = document.createElement('canvas');
    const tempCtx = tempCanvas.getContext('2d');
    tempCtx.font = `${fontWeight} ${fontSize}px 'Malgun Gothic', 'Apple SD Gothic Neo', 'Noto Sans KR', sans-serif`;
    
    for (const word of words) {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      const metrics = tempCtx.measureText(testLine);
      
      if (metrics.width > maxWidth * 2.83) { // mm to px Î≥ÄÌôò (1mm = 2.83px)
        if (currentLine) {
          lines.push(currentLine);
          currentLine = word;
        } else {
          lines.push(word); // Îã®Ïñ¥Í∞Ä ÎÑàÎ¨¥ Í∏∏Ïñ¥ÎèÑ Í∞ïÏ†úÎ°ú Ï∂îÍ∞Ä
        }
      } else {
        currentLine = testLine;
      }
    }
    if (currentLine) {
      lines.push(currentLine);
    }
    
    console.log(`üìè ÌÖçÏä§Ìä∏ Ï§Ñ Î∂ÑÌï† ÏôÑÎ£å: ${lines.length}Ï§Ñ`);
    
    let currentY = y;
    
    for (let i = 0; i < parsedLines.length; i++) {
      const lineData = parsedLines[i];
      if (lineData.content || lineData.type === 'space') {
        
        if (lineData.type === 'space') {
          currentY += 5; // Îπà Ï§Ñ Ï≤òÎ¶¨
          continue;
        }
        
        console.log(`üé® ${i + 1}Î≤àÏß∏ Ï§Ñ Î†åÎçîÎßÅ (${lineData.type}): "${lineData.content.substring(0, 30)}..."`);
        
        // Ïä§ÌÉÄÏùº Ï†ÅÏö©
        const currentFontSize = lineData.style.fontSize || fontSize;
        const currentColor = lineData.style.color || color;
        const currentFontWeight = lineData.style.fontWeight || fontWeight;
        const marginLeft = lineData.style.marginLeft || 0;
        const marginBottom = lineData.style.marginBottom || 2;
        
        // Í∞Å Ï§ÑÏùÑ Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ ÏÑ§Ï†ï (Í≥†Ìï¥ÏÉÅÎèÑ)
        const scale = 4;
        canvas.width = maxWidth * 2.83 * scale;
        canvas.height = currentFontSize * lineHeight * 2.83 * scale;
        
        // Í≥†ÌíàÏßà Î†åÎçîÎßÅ ÏÑ§Ï†ï
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        
        // ÌÖçÏä§Ìä∏ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï
        ctx.font = `${currentFontWeight} ${currentFontSize * scale}px 'Malgun Gothic', 'Apple SD Gothic Neo', 'Noto Sans KR', 'ÎßëÏùÄ Í≥†Îîï', sans-serif`;
        ctx.fillStyle = currentColor;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        ctx.textRenderingOptimization = 'optimizeQuality';
        
        // Î∞∞Í≤ΩÏùÑ Ìù∞ÏÉâÏúºÎ°ú ÏÑ§Ï†ï
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞
        ctx.fillStyle = currentColor;
        ctx.fillText(lineData.content, (10 + marginLeft) * scale, 5 * scale);
        
        // Ïù¥ÎØ∏ÏßÄÎ•º PDFÏóê Ï∂îÍ∞Ä
        const imageData = canvas.toDataURL('image/png', 1.0);
        const imageHeight = currentFontSize * lineHeight;
        doc.addImage(imageData, 'PNG', x + marginLeft, currentY, maxWidth - marginLeft, imageHeight);
        
        console.log(`‚úÖ ${i + 1}Î≤àÏß∏ Ï§Ñ PDF Ï∂îÍ∞Ä ÏôÑÎ£å (${lineData.type}, y: ${currentY})`);
        
        currentY += imageHeight + marginBottom;
        
        // ÌéòÏù¥ÏßÄ ÎÑòÍπÄ Ï≤¥ÌÅ¨
        if (currentY > 270) {
          doc.addPage();
          currentY = 30;
          console.log('üìÑ ÏÉà ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä');
        }
      }
    }
    
    console.log(`‚úÖ ÌïúÍ∏Ä ÌÖçÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò ÏôÑÎ£å (y: ${currentY})`);
    return currentY + 5;
    
  } catch (error) {
    console.error('‚ùå ÌïúÍ∏Ä ÌÖçÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò Ïã§Ìå®:', error);
    
    // Ïã§Ìå® Ïãú ÏòÅÎ¨∏ÏúºÎ°ú ÎåÄÏ≤¥
    doc.setTextColor(100, 100, 100);
    doc.setFontSize(options.fontSize || 12);
    doc.text('[Korean text - encoding issue]', x, y);
    
    return y + 15;
  }
};

/**
 * Ï∞®Ìä∏ ÏÑπÏÖò ÌÉÄÏù¥ÌãÄÏùÑ ÏòÅÎ¨∏Í≥º ÌïúÍ∏ÄÎ°ú Ï∂îÍ∞Ä
 */
const addChartSectionTitle = async (doc, englishTitle, koreanTitle, yPos) => {
  console.log(`üè∑Ô∏è ÏÑπÏÖò ÌÉÄÏù¥ÌãÄ Ï∂îÍ∞Ä: ${englishTitle} / ${koreanTitle}`);
  
  // ÌéòÏù¥ÏßÄ ÎÑòÍπÄ Ï≤¥ÌÅ¨
  if (yPos > 240) {
    doc.addPage();
    yPos = 30;
  }
  
  // ÏòÅÎ¨∏ ÌÉÄÏù¥ÌãÄ
  doc.setTextColor(255, 153, 0); // AWS Orange
  doc.setFontSize(14);
  doc.text(englishTitle, 20, yPos);
  console.log(`‚úÖ ÏòÅÎ¨∏ ÌÉÄÏù¥ÌãÄ Ï∂îÍ∞Ä ÏôÑÎ£å: ${englishTitle}`);
  
  // ÌïúÍ∏Ä ÌÉÄÏù¥ÌãÄ (Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò)
  if (koreanTitle) {
    console.log(`üá∞üá∑ ÌïúÍ∏Ä ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò ÏãúÏûë: ${koreanTitle}`);
    try {
      yPos = await addKoreanTextAsImage(doc, koreanTitle, 20, yPos + 5, {
        fontSize: 12,
        color: '#666666'
      });
      console.log(`‚úÖ ÌïúÍ∏Ä ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò ÏôÑÎ£å: ${koreanTitle}`);
    } catch (error) {
      console.error(`‚ùå ÌïúÍ∏Ä ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò Ïã§Ìå®: ${koreanTitle}`, error);
      // Ïã§Ìå® Ïãú ÏòÅÎ¨∏ÏúºÎ°ú ÎåÄÏ≤¥
      doc.setTextColor(100, 100, 100);
      doc.setFontSize(10);
      doc.text(`[Korean: ${koreanTitle}]`, 20, yPos + 5);
      yPos += 15;
    }
  }
  
  return yPos + 10;
};

/**
 * Chart.js ÎèôÏ†Å Î°úÎìú
 */
const loadChartJS = () => {
  return new Promise((resolve, reject) => {
    if (typeof window.Chart !== 'undefined') {
      resolve(window.Chart);
      return;
    }
    
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js';
    script.onload = () => {
      console.log('‚úÖ Chart.js Î°úÎìú ÏôÑÎ£å');
      resolve(window.Chart);
    };
    script.onerror = () => reject(new Error('Chart.js Î°úÎìú Ïã§Ìå®'));
    document.head.appendChild(script);
  });
};

/**
 * Ï∞®Ìä∏Î•º PDFÏóê Ï∂îÍ∞Ä
 */
const addChartToDoc = async (doc, chartCanvas, yPos, title) => {
  try {
    // Ï∞®Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
    const imageData = chartCanvas.toDataURL('image/png');
    
    // ÌéòÏù¥ÏßÄ ÎÑòÍπÄ Ï≤¥ÌÅ¨
    if (yPos > 200) {
      doc.addPage();
      yPos = 30;
    }
    
    // Ï∞®Ìä∏ Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä
    doc.addImage(imageData, 'PNG', 20, yPos, 170, 100);
    
    console.log(`‚úÖ ${title} Ï∞®Ìä∏ PDF Ï∂îÍ∞Ä ÏôÑÎ£å`);
    
    return yPos + 110;
    
  } catch (error) {
    console.error(`‚ùå ${title} Ï∞®Ìä∏ PDF Ï∂îÍ∞Ä Ïã§Ìå®:`, error);
    return yPos + 10;
  }
};

/**
 * Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï∞®Ìä∏ ÏÉùÏÑ±
 */
const createSummaryChart = async (summaryData, Chart) => {
  try {
    const canvas = document.createElement('canvas');
    canvas.width = 600;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');
    
    const chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Page Views', 'Content Views', 'Unique Visitors'],
        datasets: [{
          label: 'Statistics',
          data: [
            summaryData.totalPageViews || 0,
            summaryData.totalContentViews || 0,
            summaryData.uniqueVisitors || 0
          ],
          backgroundColor: ['#FF9900', '#232F3E', '#92D050'],
          borderColor: '#ffffff',
          borderWidth: 2
        }]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: { display: false }
        },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
    
    // Î†åÎçîÎßÅ ÏôÑÎ£å ÎåÄÍ∏∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å');
    return canvas;
    
  } catch (error) {
    console.error('‚ùå Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return null;
  }
};

/**
 * Ï†ëÏÜç Î™©Ï†Å Ï∞®Ìä∏ ÏÉùÏÑ±
 */
const createAccessPurposeChart = async (purposeData, Chart) => {
  try {
    const canvas = document.createElement('canvas');
    canvas.width = 600;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');
    
    const chart = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: purposeData.map(item => item.purpose || item.label),
        datasets: [{
          data: purposeData.map(item => item.count || item.value),
          backgroundColor: ['#FF9900', '#232F3E', '#92D050', '#FFC000'],
          borderColor: '#ffffff',
          borderWidth: 2
        }]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: {
            position: 'right',
            labels: { font: { size: 12 } }
          }
        }
      }
    });
    
    // Î†åÎçîÎßÅ ÏôÑÎ£å ÎåÄÍ∏∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ Ï†ëÏÜç Î™©Ï†Å Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å');
    return canvas;
    
  } catch (error) {
    console.error('‚ùå Ï†ëÏÜç Î™©Ï†Å Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return null;
  }
};

/**
 * ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ±
 */
const createContentChart = async (contentData, Chart) => {
  try {
    const canvas = document.createElement('canvas');
    canvas.width = 600;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');
    
    const topContent = contentData.slice(0, 5); // ÏÉÅÏúÑ 5Í∞úÎßå
    
    const chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: topContent.map(item => (item.title || item.name || 'Unknown').substring(0, 20) + '...'),
        datasets: [{
          label: 'Views',
          data: topContent.map(item => item.views || item.count || 0),
          backgroundColor: '#FF9900',
          borderColor: '#232F3E',
          borderWidth: 1
        }]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: { display: false }
        },
        scales: {
          y: { beginAtZero: true },
          x: {
            ticks: {
              maxRotation: 45,
              font: { size: 10 }
            }
          }
        }
      }
    });
    
    // Î†åÎçîÎßÅ ÏôÑÎ£å ÎåÄÍ∏∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å');
    return canvas;
    
  } catch (error) {
    console.error('‚ùå ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return null;
  }
};

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ±
 */
const createCategoryChart = async (categoryData, Chart) => {
  try {
    const canvas = document.createElement('canvas');
    canvas.width = 600;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');
    
    const chart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: categoryData.map(item => item.category || item.name),
        datasets: [{
          data: categoryData.map(item => item.count || item.value),
          backgroundColor: ['#FF9900', '#232F3E', '#92D050', '#FFC000', '#E88B00'],
          borderColor: '#ffffff',
          borderWidth: 2
        }]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: {
            position: 'right',
            labels: { font: { size: 12 } }
          }
        }
      }
    });
    
    // Î†åÎçîÎßÅ ÏôÑÎ£å ÎåÄÍ∏∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å');
    return canvas;
    
  } catch (error) {
    console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return null;
  }
};

/**
 * ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ±
 */
const createTimeChart = async (timeData, Chart) => {
  try {
    const canvas = document.createElement('canvas');
    canvas.width = 600;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');
    
    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: timeData.map(item => item.date || item.time),
        datasets: [{
          label: 'Daily Views',
          data: timeData.map(item => item.views || item.count),
          borderColor: '#FF9900',
          backgroundColor: 'rgba(255, 153, 0, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: { display: false }
        },
        scales: {
          y: { beginAtZero: true },
          x: {
            ticks: {
              maxRotation: 45,
              font: { size: 10 }
            }
          }
        }
      }
    });
    
    // Î†åÎçîÎßÅ ÏôÑÎ£å ÎåÄÍ∏∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å');
    return canvas;
    
  } catch (error) {
    console.error('‚ùå ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return null;
  }
};

/**
 * AI Í∏∞Î∞ò ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
 */
export const generateAIContentReport = async (contentData) => {
  try {
    console.log('üìÑ AI ÏΩòÌÖêÏ∏† Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏãúÏûë...');
    
    const analysis = await generateContentAnalysis(contentData);
    const doc = new jsPDF(PDF_CONFIG.orientation, PDF_CONFIG.unit, PDF_CONFIG.format);
    
    let yPos = await addEnglishHeader(doc, 'AWS Demo Factory Content Analysis Report');
    
    yPos = await addEnglishSectionTitle(doc, 'üìÑ Content Analysis', yPos);
    yPos = await addKoreanTextAsImage(doc, analysis.summary, 20, yPos, {
      fontSize: 10,
      maxWidth: 170
    });
    
    const fileName = `AWS_Demo_Factory_Content_Report_${new Date().toISOString().slice(0, 19).replace(/:/g, '')}.pdf`;
    doc.save(fileName);
    
    return {
      success: true,
      fileName: fileName,
      message: 'AI ÏΩòÌÖêÏ∏† Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.'
    };
    
  } catch (error) {
    console.error('‚ùå AI ÏΩòÌÖêÏ∏† Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * AI Í∏∞Î∞ò ÏûëÏÑ±Ïûê Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
 */
export const generateAIAuthorReport = async (authorData) => {
  try {
    console.log('‚úçÔ∏è AI ÏûëÏÑ±Ïûê Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏãúÏûë...');
    
    const analysis = await generateAuthorAnalysis(authorData);
    const doc = new jsPDF(PDF_CONFIG.orientation, PDF_CONFIG.unit, PDF_CONFIG.format);
    
    let yPos = await addEnglishHeader(doc, 'AWS Demo Factory Author Analysis Report');
    
    yPos = await addEnglishSectionTitle(doc, '‚úçÔ∏è Author Analysis', yPos);
    yPos = await addKoreanTextAsImage(doc, analysis.summary, 20, yPos, {
      fontSize: 10,
      maxWidth: 170
    });
    
    const fileName = `AWS_Demo_Factory_Author_Report_${new Date().toISOString().slice(0, 19).replace(/:/g, '')}.pdf`;
    doc.save(fileName);
    
    return {
      success: true,
      fileName: fileName,
      message: 'AI ÏûëÏÑ±Ïûê Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.'
    };
    
  } catch (error) {
    console.error('‚ùå AI ÏûëÏÑ±Ïûê Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * AI Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º ÏÑπÏÖòÎ≥ÑÎ°ú Î∂ÑÎ¶¨ÌïòÎäî Ìï®Ïàò
 */
const extractInsightSections = (fullInsight) => {
  try {
    console.log('üìã AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÑπÏÖò Î∂ÑÎ¶¨ ÏãúÏûë...');
    
    const sections = {
      overview: '',
      accessPurpose: '',
      content: '',
      category: '',
      time: '',
      recommendations: ''
    };
    
    // Ï†ÑÏ≤¥ ÌòÑÌô© ÏöîÏïΩ Ï∂îÏ∂ú
    const overviewMatch = fullInsight.match(/## üìä Ï†ÑÏ≤¥ ÌòÑÌô© ÏöîÏïΩ([\s\S]*?)(?=## |üîç|$)/i);
    if (overviewMatch) {
      sections.overview = overviewMatch[1].trim();
    }
    
    // ÌïµÏã¨ Ïù∏ÏÇ¨Ïù¥Ìä∏ Ï§ë ÏÇ¨Ïö©Ïûê Í¥ÄÏã¨ Î∂ÑÏïº Î∂ÑÏÑù (Ï†ëÏÜç Î™©Ï†ÅÍ≥º Ïú†ÏÇ¨)
    const userInterestMatch = fullInsight.match(/### 1\. ÏÇ¨Ïö©Ïûê Í¥ÄÏã¨ Î∂ÑÏïº Ïã¨Ï∏µ Î∂ÑÏÑù([\s\S]*?)(?=### 2\.|## |üí°|$)/i);
    if (userInterestMatch) {
      sections.accessPurpose = userInterestMatch[1].trim();
    }
    
    // ÏΩòÌÖêÏ∏† ÏÜåÎπÑ Ìå®ÌÑ¥ Î∂ÑÏÑù
    const contentMatch = fullInsight.match(/### 2\. ÏΩòÌÖêÏ∏† ÏÜåÎπÑ Ìå®ÌÑ¥ Î∂ÑÏÑù([\s\S]*?)(?=### 3\.|## |üí°|$)/i);
    if (contentMatch) {
      sections.content = contentMatch[1].trim();
    }
    
    // ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏÇ¨Ïö©Ïûê ÌäπÏÑ± (Ïπ¥ÌÖåÍ≥†Î¶¨ ÎåÄÏã† ÏãúÍ∞Ñ Î∂ÑÏÑùÏúºÎ°ú ÏÇ¨Ïö©)
    const timeMatch = fullInsight.match(/### 3\. ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏÇ¨Ïö©Ïûê ÌäπÏÑ±([\s\S]*?)(?=### 4\.|## |üí°|$)/i);
    if (timeMatch) {
      sections.time = timeMatch[1].trim();
    }
    
    // ÎπÑÏ¶àÎãàÏä§ Í∞ÄÏπò Ï∞ΩÏ∂ú Î∂ÑÏÑù (Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑùÏúºÎ°ú ÏÇ¨Ïö©)
    const businessMatch = fullInsight.match(/### 4\. ÎπÑÏ¶àÎãàÏä§ Í∞ÄÏπò Ï∞ΩÏ∂ú Î∂ÑÏÑù([\s\S]*?)(?=## |üí°|$)/i);
    if (businessMatch) {
      sections.category = businessMatch[1].trim();
    }
    
    // Ï†ÑÎûµÏ†Å Í∂åÏû•ÏÇ¨Ìï≠ Ï∂îÏ∂ú
    const recommendationsMatch = fullInsight.match(/## üí° Ï†ÑÎûµÏ†Å Í∂åÏû•ÏÇ¨Ìï≠([\s\S]*?)(?=## üìä|üéØ|$)/i);
    if (recommendationsMatch) {
      sections.recommendations = recommendationsMatch[1].trim();
    }
    
    console.log('‚úÖ AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÑπÏÖò Î∂ÑÎ¶¨ ÏôÑÎ£å');
    console.log('üìã Î∂ÑÎ¶¨Îêú ÏÑπÏÖò:', {
      overview: sections.overview ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      accessPurpose: sections.accessPurpose ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      content: sections.content ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      category: sections.category ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      time: sections.time ? 'ÏûàÏùå' : 'ÏóÜÏùå',
      recommendations: sections.recommendations ? 'ÏûàÏùå' : 'ÏóÜÏùå'
    });
    
    return sections;
    
  } catch (error) {
    console.error('‚ùå AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÑπÏÖò Î∂ÑÎ¶¨ Ïã§Ìå®:', error);
    // Ïò§Î•ò Ïãú Ï†ÑÏ≤¥ Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º overviewÏóê ÎÑ£Ïñ¥ fallback
    return {
      overview: fullInsight,
      accessPurpose: '',
      content: '',
      category: '',
      time: '',
      recommendations: ''
    };
  }
};

const aiPdfGenerator = {
  generateAIAnalyticsReport,
  generateChartOnlyReport,
  generateAIContentReport,
  generateAIAuthorReport
};

export default aiPdfGenerator;