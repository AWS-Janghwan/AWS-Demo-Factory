const express = require('express');
const cors = require('cors');
const AWS = require('aws-sdk');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const os = require('os');
require('dotenv').config();

const app = express();
const PORT = process.env.BACKEND_PORT || 3001;

// AWS credentials Î°úÎî© Ìï®Ïàò (Î°úÏª¨ credentials Ïö∞ÏÑ†)
const getAWSCredentials = () => {
  try {
    // 1. Î°úÏª¨ credentials ÌååÏùº Ïö∞ÏÑ† ÌôïÏù∏ (Î∞∞Ìè¨ ÌôòÍ≤Ω: /data/.aws/credentials, Î°úÏª¨: ~/.aws/credentials)
    const credentialsPath = process.env.NODE_ENV === 'production' 
      ? '/data/.aws/credentials'
      : path.join(os.homedir(), '.aws', 'credentials');
    const profileName = process.env.AWS_PROFILE || 'default';
    
    if (fs.existsSync(credentialsPath)) {
      const content = fs.readFileSync(credentialsPath, 'utf8');
      const profiles = {};
      let currentProfile = null;

      content.split('\n').forEach(line => {
        line = line.trim();
        
        if (line.startsWith('[') && line.endsWith(']')) {
          currentProfile = line.slice(1, -1);
          profiles[currentProfile] = {};
        } else if (line.includes('=') && currentProfile) {
          const [key, value] = line.split('=').map(s => s.trim());
          profiles[currentProfile][key] = value;
        }
      });

      if (profiles[profileName] && profiles[profileName].aws_access_key_id) {
        console.log(`üîê Î°úÏª¨ credentials ÌååÏùº ÏÇ¨Ïö© (ÌîÑÎ°úÌïÑ: ${profileName})`);
        return {
          accessKeyId: profiles[profileName].aws_access_key_id,
          secretAccessKey: profiles[profileName].aws_secret_access_key,
          region: process.env.REACT_APP_AWS_REGION || 'ap-northeast-2'
        };
      }
    }
    
    // 2. ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
    if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY) {
      console.log('üîê ÌôòÍ≤Ω Î≥ÄÏàòÏóêÏÑú AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÏÇ¨Ïö©');
      return {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
        region: process.env.REACT_APP_AWS_REGION || 'ap-northeast-2'
      };
    }
    
    // 3. EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ÌîÑÎ°úÌïÑ ÌôïÏù∏ (Î∞∞Ìè¨ ÌôòÍ≤Ω)
    if (process.env.NODE_ENV === 'production' || process.env.AWS_EXECUTION_ENV) {
      console.log('üîê EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ÌîÑÎ°úÌïÑ ÏÇ¨Ïö© (Î∞∞Ìè¨ ÌôòÍ≤Ω)');
      return {
        region: process.env.REACT_APP_AWS_REGION || 'ap-northeast-2'
      };
    }
    
    // 4. Í∏∞Î≥∏ AWS SDK ÏÑ§Ï†ï ÏÇ¨Ïö© (EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ÌîÑÎ°úÌïÑ Îì±)
    console.log('üîê Í∏∞Î≥∏ AWS SDK ÏÑ§Ï†ï ÏÇ¨Ïö© (Ïù∏Ïä§ÌÑ¥Ïä§ ÌîÑÎ°úÌïÑ Îì±)');
    return {
      region: process.env.REACT_APP_AWS_REGION || 'ap-northeast-2'
    };
    
  } catch (error) {
    console.error('‚ùå AWS ÏûêÍ≤© Ï¶ùÎ™Ö Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error.message);
    // Í∏∞Î≥∏ ÏÑ§Ï†ïÏúºÎ°ú fallback
    return {
      region: process.env.REACT_APP_AWS_REGION || 'ap-northeast-2'
    };
  }
};

// AWS ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
const initializeAWS = () => {
  try {
    console.log('üîê AWS Î∞±ÏóîÎìú ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî Ï§ë...');
    
    const credentials = getAWSCredentials();
    
    // credentialsÏóê accessKeyIdÍ∞Ä ÏûàÏúºÎ©¥ Î™ÖÏãúÏ†Å ÏÑ§Ï†ï
    if (credentials.accessKeyId) {
      AWS.config.update({
        accessKeyId: credentials.accessKeyId,
        secretAccessKey: credentials.secretAccessKey,
        region: credentials.region
      });
      console.log('‚úÖ Î™ÖÏãúÏ†Å AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÏÑ§Ï†ï ÏôÑÎ£å');
    } else {
      // EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ÌîÑÎ°úÌïÑ ÏÇ¨Ïö© Ïãú Î¶¨Ï†ÑÎßå ÏÑ§Ï†ï
      AWS.config.update({
        region: credentials.region
      });
      console.log('‚úÖ EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ÌîÑÎ°úÌïÑ ÏÇ¨Ïö© ÏÑ§Ï†ï ÏôÑÎ£å');
    }
    
    console.log('‚úÖ AWS Î∞±ÏóîÎìú ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å:', {
      region: credentials.region,
      credentialType: credentials.accessKeyId ? 'explicit' : 'instance-profile'
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå AWS Î∞±ÏóîÎìú ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ ÏÑúÎ≤ÑÎäî ÏãúÏûëÌïòÎèÑÎ°ù Ìï® (ÎÇòÏ§ëÏóê Ïû¨ÏãúÎèÑ Í∞ÄÎä•)
    console.log('‚ö†Ô∏è AWS Ï¥àÍ∏∞Ìôî Ïã§Ìå®ÌñàÏßÄÎßå ÏÑúÎ≤ÑÎ•º Í≥ÑÏÜç ÏãúÏûëÌï©ÎãàÎã§...');
    return false;
  }
};

// ÌôòÍ≤Ω Î≥ÄÏàò ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥
console.log('üîß Î∞±ÏóîÎìú ÏÑúÎ≤Ñ ÌôòÍ≤Ω Î≥ÄÏàò:');
console.log('- AWS_REGION:', process.env.REACT_APP_AWS_REGION || process.env.AWS_DEFAULT_REGION);
console.log('- S3_BUCKET:', process.env.REACT_APP_S3_BUCKET);
console.log('- DYNAMODB_TABLE:', process.env.REACT_APP_DYNAMODB_TABLE);
console.log('- AWS_PROFILE:', process.env.AWS_PROFILE);
console.log('- NODE_ENV:', process.env.NODE_ENV);

// AWS Ï¥àÍ∏∞Ìôî Ïã§Ìñâ
initializeAWS();

// CORS ÏÑ§Ï†ï (Ìè¨Í¥ÑÏ†Å ÎèÑÎ©îÏù∏ ÏßÄÏõê)
app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://localhost:3001', 
    'https://demofactory.cloud',
    'https://www.demofactory.cloud',
    'https://awsdemofactory.cloud',
    'https://www.awsdemofactory.cloud',
    'http://demo-factory-alb-10818307.ap-northeast-2.elb.amazonaws.com',
    'https://demo-factory-alb-10818307.ap-northeast-2.elb.amazonaws.com'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: [
    'Content-Type', 
    'Authorization', 
    'X-Requested-With',
    'Accept',
    'Origin',
    'Cache-Control',
    'X-File-Name'
  ],
  exposedHeaders: ['Content-Length', 'X-Foo', 'X-Bar'],
  maxAge: 86400 // 24ÏãúÍ∞Ñ preflight Ï∫êÏãú
}));

app.use(express.json({ limit: '200mb' }));
app.use(express.urlencoded({ extended: true, limit: '200mb' }));

// OPTIONS ÏöîÏ≤≠ Î™ÖÏãúÏ†Å Ï≤òÎ¶¨
app.options('*', (req, res) => {
  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, X-File-Name');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header('Access-Control-Max-Age', '86400');
  res.sendStatus(200);
});

// Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'AWS Demo Factory Backend API',
    timestamp: new Date().toISOString(),
    environment: {
      NODE_ENV: process.env.NODE_ENV || 'development',
      AWS_REGION: process.env.AWS_REGION || 'ap-northeast-2',
      S3_BUCKET: process.env.S3_BUCKET || 'aws-demo-factory',
      DYNAMODB_TABLE: process.env.DYNAMODB_TABLE || 'DemoFactoryContents'
    }
  });
});

// Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú /health ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'AWS Demo Factory Backend API',
    timestamp: new Date().toISOString(),
    environment: {
      NODE_ENV: process.env.NODE_ENV,
      AWS_REGION: process.env.REACT_APP_AWS_REGION || process.env.AWS_DEFAULT_REGION,
      S3_BUCKET: process.env.REACT_APP_S3_BUCKET,
      DYNAMODB_TABLE: process.env.REACT_APP_DYNAMODB_TABLE
    }
  });
});

// Î∞∞Ìè¨ ÌôòÍ≤Ω ÎèôÍ∏∞Ìôî ÏÉÅÌÉú ÌôïÏù∏ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/deployment/sync-status', async (req, res) => {
  try {
    // DynamoDB Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    const dynamodb = new AWS.DynamoDB.DocumentClient();
    const testParams = {
      TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents',
      Limit: 1
    };
    
    const dynamoResult = await dynamodb.scan(testParams).promise();
    
    // S3 Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    const s3 = new AWS.S3();
    const s3Params = {
      Bucket: process.env.REACT_APP_S3_BUCKET || 'aws-demo-factory',
      MaxKeys: 1
    };
    
    const s3Result = await s3.listObjectsV2(s3Params).promise();
    
    res.json({
      status: 'success',
      timestamp: new Date().toISOString(),
      services: {
        dynamodb: {
          status: 'connected',
          table: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents',
          itemCount: dynamoResult.Count || 0
        },
        s3: {
          status: 'connected',
          bucket: process.env.REACT_APP_S3_BUCKET || 'aws-demo-factory',
          objectCount: s3Result.KeyCount || 0
        }
      },
      environment: {
        region: process.env.REACT_APP_AWS_REGION || process.env.AWS_DEFAULT_REGION,
        deployment: 'production'
      }
    });
  } catch (error) {
    console.error('‚ùå ÎèôÍ∏∞Ìôî ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
    res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// AWS ÏÑ§Ï†ïÏùÄ initializeAWS()ÏóêÏÑú Ïù¥ÎØ∏ ÏôÑÎ£åÎê®

// Cognito Identity Provider ÏÑ§Ï†ï
const cognitoIdp = new AWS.CognitoIdentityServiceProvider({
  region: process.env.REACT_APP_COGNITO_REGION || 'us-west-2'
});

// Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ï§ëÎ≥µ Ï†úÍ±∞ (ÏúÑÏóê Ïù¥ÎØ∏ Ï†ïÏùòÎê®)

// Cognito ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå API
app.get('/api/cognito/users', async (req, res) => {
  try {
    console.log('üë• Cognito ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå API Ìò∏Ï∂ú');
    
    const params = {
      UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
      Limit: 60
    };
    
    const result = await cognitoIdp.listUsers(params).promise();
    console.log('üìã ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ:', result.Users.length, 'Î™Ö');
    
    // Í∞Å ÏÇ¨Ïö©ÏûêÏùò Í∑∏Î£π Ï†ïÎ≥¥ÎèÑ Ìï®Íªò Ï°∞Ìöå
    const usersWithGroups = await Promise.all(
      result.Users.map(async (cognitoUser) => {
        // ÏÇ¨Ïö©Ïûê ÏÜçÏÑ± ÌååÏã±
        const attributes = {};
        cognitoUser.Attributes.forEach(attr => {
          attributes[attr.Name] = attr.Value;
        });
        
        // ÏÇ¨Ïö©Ïûê Í∑∏Î£π Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        let groups = [];
        try {
          const groupParams = {
            UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
            Username: cognitoUser.Username
          };
          const groupResult = await cognitoIdp.adminListGroupsForUser(groupParams).promise();
          groups = groupResult.Groups.map(group => group.GroupName);
        } catch (groupError) {
          console.error('Í∑∏Î£π Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', groupError);
        }
        
        // Ïó≠Ìï† Í≤∞Ï†ï
        const role = groups.includes('Admin') ? 'Admin' :
                    groups.includes('ContentManager') ? 'Content Manager' :
                    'Viewer';
        
        return {
          id: cognitoUser.Username,
          username: cognitoUser.Username,
          name: attributes.name || 'Unknown',
          email: attributes.email || 'No Email',
          role: role,
          groups: groups,
          status: cognitoUser.UserStatus,
          enabled: cognitoUser.Enabled,
          createdAt: cognitoUser.UserCreateDate ? 
            new Date(cognitoUser.UserCreateDate).toLocaleDateString('ko-KR') : 'Unknown',
          lastModified: cognitoUser.UserLastModifiedDate ?
            new Date(cognitoUser.UserLastModifiedDate).toLocaleDateString('ko-KR') : 'Unknown'
        };
      })
    );
    
    res.json({
      success: true,
      users: usersWithGroups
    });
    
  } catch (error) {
    console.error('‚ùå Cognito ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ÏÇ¨Ïö©Ïûê Ïó≠Ìï† Î≥ÄÍ≤Ω API
app.post('/api/cognito/users/:username/role', async (req, res) => {
  try {
    const { username } = req.params;
    const { newRole } = req.body;
    
    console.log(`üîÑ ÏÇ¨Ïö©Ïûê ${username}Ïùò Ïó≠Ìï†ÏùÑ ${newRole}Î°ú Î≥ÄÍ≤Ω ÏãúÏûë`);
    
    // Í∏∞Ï°¥ Í∑∏Î£πÏóêÏÑú Ï†úÍ±∞
    const groupParams = {
      UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
      Username: username
    };
    
    const currentGroups = await cognitoIdp.adminListGroupsForUser(groupParams).promise();
    
    for (const group of currentGroups.Groups) {
      await cognitoIdp.adminRemoveUserFromGroup({
        UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
        Username: username,
        GroupName: group.GroupName
      }).promise();
    }
    
    // ÏÉà Í∑∏Î£πÏóê Ï∂îÍ∞Ä
    let targetGroup = null;
    switch (newRole) {
      case 'Admin':
        targetGroup = 'Admin';
        break;
      case 'Content Manager':
        targetGroup = 'ContentManager';
        break;
      default:
        // ViewerÎäî Í∑∏Î£π ÏóÜÏùå
        break;
    }
    
    if (targetGroup) {
      await cognitoIdp.adminAddUserToGroup({
        UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
        Username: username,
        GroupName: targetGroup
      }).promise();
    }
    
    res.json({
      success: true,
      message: `ÏÇ¨Ïö©Ïûê ${username}Ïùò Ïó≠Ìï†Ïù¥ ${newRole}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`
    });
    
  } catch (error) {
    console.error('‚ùå ÏÇ¨Ïö©Ïûê Ïó≠Ìï† Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú API
app.delete('/api/cognito/users/:username', async (req, res) => {
  try {
    const { username } = req.params;
    
    console.log(`üóëÔ∏è ÏÇ¨Ïö©Ïûê ${username} ÏÇ≠Ï†ú ÏãúÏûë`);
    
    await cognitoIdp.adminDeleteUser({
      UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
      Username: username
    }).promise();
    
    res.json({
      success: true,
      message: `ÏÇ¨Ïö©Ïûê ${username}Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`
    });
    
  } catch (error) {
    console.error('‚ùå ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ÏÇ¨Ïö©Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî API
app.post('/api/cognito/users/:username/reset-password', async (req, res) => {
  try {
    const { username } = req.params;
    
    console.log(`üîë ÏÇ¨Ïö©Ïûê ${username} ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî ÏãúÏûë`);
    
    // ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉùÏÑ±
    const generateTempPassword = () => {
      const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789!@#$%^&*';
      let password = '';
      
      // Í∞Å Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú ÏµúÏÜå 1Í∞úÏî©
      password += 'ABCDEFGHJKLMNPQRSTUVWXYZ'[Math.floor(Math.random() * 25)]; // ÎåÄÎ¨∏Ïûê
      password += 'abcdefghijkmnpqrstuvwxyz'[Math.floor(Math.random() * 25)]; // ÏÜåÎ¨∏Ïûê
      password += '23456789'[Math.floor(Math.random() * 8)]; // Ïà´Ïûê
      password += '!@#$%^&*'[Math.floor(Math.random() * 8)]; // ÌäπÏàòÎ¨∏Ïûê
      
      // ÎÇòÎ®∏ÏßÄ 4ÏûêÎ¶¨ ÎûúÎç§
      for (let i = 0; i < 4; i++) {
        password += chars[Math.floor(Math.random() * chars.length)];
      }
      
      return password.split('').sort(() => Math.random() - 0.5).join('');
    };
    
    const tempPassword = generateTempPassword();
    
    await cognitoIdp.adminSetUserPassword({
      UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,
      Username: username,
      Password: tempPassword,
      Permanent: false
    }).promise();
    
    res.json({
      success: true,
      message: `ÏÇ¨Ïö©Ïûê ${username}Ïùò ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.`,
      tempPassword: tempPassword
    });
    
  } catch (error) {
    console.error('‚ùå ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ÌååÏùº ÏóÖÎ°úÎìúÎ•º ÏúÑÌïú multer ÏÑ§Ï†ï
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 500 * 1024 * 1024 // 500MB Ï†úÌïú
  },
  fileFilter: (req, file, cb) => {
    // ÌååÏùº ÌôïÏû•Ïûê Í∏∞Î∞ò Í≤ÄÏ¶ù (Îçî ÏïàÏ†ÑÌïòÍ≥† Ï†ïÌôïÌï®)
    const fileName = file.originalname.toLowerCase();
    const allowedExtensions = [
      // Ïù¥ÎØ∏ÏßÄ
      '.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg',
      // ÎπÑÎîîÏò§
      '.mp4', '.webm', '.ogg', '.avi', '.mov', '.wmv',
      // Ïò§ÎîîÏò§
      '.mp3', '.wav', '.ogg',
      // Î¨∏ÏÑú
      '.pdf', '.txt', '.md', '.doc', '.docx'
    ];
    
    const hasAllowedExtension = allowedExtensions.some(ext => fileName.endsWith(ext));
    
    if (hasAllowedExtension) {
      console.log(`‚úÖ [Î∞±ÏóîÎìú] ÌååÏùº ÌÉÄÏûÖ ÌóàÏö©: ${file.originalname} (${file.mimetype})`);
      cb(null, true);
    } else {
      console.log(`‚ùå [Î∞±ÏóîÎìú] ÌååÏùº ÌÉÄÏûÖ Í±∞Î∂Ä: ${file.originalname} (${file.mimetype})`);
      cb(new Error(`ÌóàÏö©ÎêòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãù: ${fileName}`), false);
    }
  }
});

// ÏïàÏ†ÑÌïú S3 ÌååÏùº ÏóÖÎ°úÎìú ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/api/upload/secure', upload.single('file'), async (req, res) => {
  try {
    console.log('üîí [Î∞±ÏóîÎìú] ÏïàÏ†ÑÌïú ÌååÏùº ÏóÖÎ°úÎìú ÏãúÏûë');
    
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'ÏóÖÎ°úÎìúÌï† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§'
      });
    }
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // S3 Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const s3 = new AWS.S3({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    // ÏïàÏ†ÑÌïú ÌååÏùºÎ™Ö ÏÉùÏÑ±
    const timestamp = Date.now();
    const safeFileName = req.file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');
    const fileExtension = path.extname(safeFileName);
    const baseName = path.basename(safeFileName, fileExtension);
    
    // ÎÇ†Ïßú Í∏∞Î∞ò Í≤ΩÎ°ú ÏÉùÏÑ±
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    
    // ÌååÏùº ÌÉÄÏûÖÏóê Îî∞Î•∏ Í≤ΩÎ°ú Î∂ÑÎ•ò
    let folder = 'documents';
    if (req.file.mimetype.startsWith('image/')) {
      folder = 'images';
    } else if (req.file.mimetype.startsWith('video/')) {
      folder = 'videos';
    } else if (req.file.mimetype.startsWith('audio/')) {
      folder = 'audio';
    }
    
    const s3Key = `contents/${folder}/${year}/${month}/${day}/${timestamp}-${baseName}${fileExtension}`;
    
    // S3Ïóê ÌååÏùº ÏóÖÎ°úÎìú
    const uploadParams = {
      Bucket: process.env.REACT_APP_S3_BUCKET || 'demo-factory-storage-bucket',
      Key: s3Key,
      Body: req.file.buffer,
      ContentType: req.file.mimetype,
      Metadata: {
        'original-name': req.file.originalname,
        'upload-timestamp': new Date().toISOString(),
        'content-id': req.body.contentId || 'unknown'
      }
    };
    
    console.log(`üìÅ [Î∞±ÏóîÎìú] S3 ÏóÖÎ°úÎìú ÏãúÏûë: ${s3Key}`);
    const uploadResult = await s3.upload(uploadParams).promise();
    
    // ÏóÖÎ°úÎìú ÏÑ±Í≥µ ÏùëÎãµ
    const fileInfo = {
      id: `file-${timestamp}`,
      name: req.file.originalname,
      safeName: `${baseName}${fileExtension}`,
      size: req.file.size,
      type: req.file.mimetype,
      s3Key: s3Key,
      s3Bucket: uploadParams.Bucket,
      url: uploadResult.Location,
      isSecure: true,
      uploadedAt: new Date().toISOString(),
      contentId: req.body.contentId || null
    };
    
    console.log('‚úÖ [Î∞±ÏóîÎìú] ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', fileInfo.name);
    
    res.json({
      success: true,
      file: fileInfo
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// DynamoDBÏóê ÏΩòÌÖêÏ∏† Ï†ÄÏû• ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/api/content/save', async (req, res) => {
  try {
    console.log('üíæ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† DynamoDB Ï†ÄÏû• ÏãúÏûë');
    
    const contentData = req.body;
    
    if (!contentData.title || !contentData.content) {
      return res.status(400).json({
        success: false,
        error: 'Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÄ ÌïÑÏàòÏûÖÎãàÎã§'
      });
    }
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    // ÏΩòÌÖêÏ∏† Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    const item = {
      ...contentData,
      id: contentData.id || `content-${Date.now()}`,
      createdAt: contentData.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      // GSIÎ•º ÏúÑÌïú Ï∂îÍ∞Ä ÌïÑÎìú
      categoryCreatedAt: `${contentData.category}#${contentData.createdAt || new Date().toISOString()}`,
      authorCreatedAt: `${contentData.author}#${contentData.createdAt || new Date().toISOString()}`
    };
    
    const params = {
      TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents',
      Item: item
    };
    
    console.log(`üìÅ [Î∞±ÏóîÎìú] DynamoDB Ï†ÄÏû• ÏãúÏûë: ${item.id}`);
    await dynamodb.put(params).promise();
    
    console.log('‚úÖ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† DynamoDB Ï†ÄÏû• ÏÑ±Í≥µ:', item.title);
    
    res.json({
      success: true,
      content: item
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Ï†ÄÏû• Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// DynamoDBÏóêÏÑú ÏΩòÌÖêÏ∏† Ï°∞Ìöå ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/content/list', async (req, res) => {
  try {
    console.log('üìÅ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå ÏãúÏûë');
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents'
    };
    
    const result = await dynamodb.scan(params).promise();
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ: ${result.Items?.length || 0}Í∞ú`);
    
    res.json({
      success: true,
      contents: result.Items || []
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// DynamoDBÏóêÏÑú Í∞úÎ≥Ñ ÏΩòÌÖêÏ∏† Ï°∞Ìöå ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/content/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üîç [Î∞±ÏóîÎìú] Í∞úÎ≥Ñ ÏΩòÌÖêÏ∏† Ï°∞Ìöå ÏãúÏûë:', id);
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents',
      Key: {
        id: id
      }
    };
    
    const result = await dynamodb.get(params).promise();
    
    if (result.Item) {
      console.log('‚úÖ [Î∞±ÏóîÎìú] Í∞úÎ≥Ñ ÏΩòÌÖêÏ∏† Ï°∞Ìöå ÏÑ±Í≥µ:', result.Item.title);
      res.json({
        success: true,
        content: result.Item
      });
    } else {
      console.log('‚ùå [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏†Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', id);
      res.status(404).json({
        success: false,
        error: 'ÏΩòÌÖêÏ∏†Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
      });
    }
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] Í∞úÎ≥Ñ ÏΩòÌÖêÏ∏† Ï°∞Ìöå Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// DynamoDBÏóêÏÑú ÏΩòÌÖêÏ∏† ÏÇ≠Ï†ú ÏóîÎìúÌè¨Ïù∏Ìä∏
app.delete('/api/content/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† ÏÇ≠Ï†ú ÏãúÏûë: ${id}`);
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents',
      Key: { id }
    };
    
    await dynamodb.delete(params).promise();
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† ÏÇ≠Ï†ú ÏÑ±Í≥µ: ${id}`);
    
    res.json({
      success: true,
      message: 'ÏΩòÌÖêÏ∏†Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// DynamoDBÏóêÏÑú ÎßåÎ£åÎêú blob URL Ï†ïÎ¶¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/api/content/cleanup-blob-urls', async (req, res) => {
  try {
    console.log('üßπ [Î∞±ÏóîÎìú] blob URL Ï†ïÎ¶¨ ÏãúÏûë');
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    // Î™®Îì† ÏΩòÌÖêÏ∏† Ï°∞Ìöå
    const scanParams = {
      TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents'
    };
    
    const result = await dynamodb.scan(scanParams).promise();
    let updatedCount = 0;
    
    // Í∞Å ÏΩòÌÖêÏ∏†Ïùò ÌååÏùºÏóêÏÑú blob URL Ï†úÍ±∞
    for (const content of result.Items || []) {
      if (content.files && content.files.length > 0) {
        let hasUpdates = false;
        const updatedFiles = content.files.map(file => {
          // blob URLÏù¥ ÏûàÎäî ÌååÏùº Ï≤òÎ¶¨
          if (file.url && file.url.startsWith('blob:')) {
            console.log(`üóëÔ∏è [Î∞±ÏóîÎìú] blob URL Ï†úÍ±∞: ${file.name} - ${file.url}`);
            hasUpdates = true;
            return {
              ...file,
              url: undefined, // blob URL Ï†úÍ±∞
              isLocal: false,
              migrationNeeded: true
            };
          }
          return file;
        });
        
        // ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÌïÑÏöîÌïú Í≤ΩÏö∞ DynamoDB ÏóÖÎç∞Ïù¥Ìä∏
        if (hasUpdates) {
          const updateParams = {
            TableName: process.env.REACT_APP_DYNAMODB_TABLE || 'DemoFactoryContents',
            Key: { id: content.id },
            UpdateExpression: 'SET files = :files, updatedAt = :updatedAt',
            ExpressionAttributeValues: {
              ':files': updatedFiles,
              ':updatedAt': new Date().toISOString()
            }
          };
          
          await dynamodb.update(updateParams).promise();
          updatedCount++;
          console.log(`‚úÖ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: ${content.title}`);
        }
      }
    }
    
    console.log(`üéâ [Î∞±ÏóîÎìú] blob URL Ï†ïÎ¶¨ ÏôÑÎ£å: ${updatedCount}Í∞ú ÏΩòÌÖêÏ∏† ÏóÖÎç∞Ïù¥Ìä∏`);
    
    res.json({
      success: true,
      message: `${updatedCount}Í∞ú ÏΩòÌÖêÏ∏†ÏóêÏÑú ÎßåÎ£åÎêú blob URLÏùÑ Ï†ïÎ¶¨ÌñàÏäµÎãàÎã§.`,
      updatedCount
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] blob URL Ï†ïÎ¶¨ Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// S3 ÌååÏùº Î™©Î°ù Ï°∞Ìöå ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/s3/files', async (req, res) => {
  try {
    console.log('üìÅ [Î∞±ÏóîÎìú] S3 ÌååÏùº Î™©Î°ù Ï°∞Ìöå ÏãúÏûë');
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // S3 Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const s3 = new AWS.S3({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      Bucket: process.env.REACT_APP_S3_BUCKET || 'aws-demo-factory',
      Prefix: 'contents/'
    };
    
    const data = await s3.listObjectsV2(params).promise();
    
    const files = data.Contents
      .filter(obj => obj.Size > 0) // Ìè¥Îçî Ï†úÏô∏
      .map(obj => {
        const key = obj.Key;
        const fileName = key.split('/').pop();
        const fileExtension = fileName.split('.').pop().toLowerCase();
        
        // ÌååÏùº ÌÉÄÏûÖ Í≤∞Ï†ï
        let fileType = 'document';
        if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(fileExtension)) {
          fileType = 'image';
        } else if (['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(fileExtension)) {
          fileType = 'video';
        } else if (['mp3', 'wav', 'ogg', 'aac', 'flac'].includes(fileExtension)) {
          fileType = 'audio';
        }
        
        return {
          id: key,
          name: fileName,
          s3Key: key,
          size: obj.Size,
          lastModified: obj.LastModified,
          type: fileType,
          url: null // Presigned URLÏùÄ Î≥ÑÎèÑÎ°ú ÏÉùÏÑ±
        };
      });
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] S3ÏóêÏÑú ${files.length}Í∞ú ÌååÏùº Ï°∞Ìöå ÏôÑÎ£å`);
    
    res.json({
      success: true,
      files: files
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] S3 ÌååÏùº Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// S3 ÌååÏùº ÏßÅÏ†ë Ïä§Ìä∏Î¶¨Î∞ç ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/s3/file/:encodedKey', async (req, res) => {
  try {
    const s3Key = decodeURIComponent(req.params.encodedKey);
    console.log(`üìÅ [Î∞±ÏóîÎìú] S3 ÌååÏùº Ïä§Ìä∏Î¶¨Î∞ç: ${s3Key}`);
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // S3 Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const s3 = new AWS.S3({
      region: process.env.REACT_APP_AWS_REGION || 'ap-northeast-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      Bucket: process.env.REACT_APP_S3_BUCKET || 'aws-demo-factory',
      Key: s3Key
    };
    
    // S3 Í∞ùÏ≤¥ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const headResult = await s3.headObject(params).promise();
    
    // Ï†ÅÏ†àÌïú Content-Type ÏÑ§Ï†ï
    res.set({
      'Content-Type': headResult.ContentType || 'application/octet-stream',
      'Content-Length': headResult.ContentLength,
      'Cache-Control': 'public, max-age=31536000', // 1ÎÖÑ Ï∫êÏãú
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
    
    // S3 Í∞ùÏ≤¥ Ïä§Ìä∏Î¶¨Î∞ç
    const stream = s3.getObject(params).createReadStream();
    stream.pipe(res);
    
    stream.on('error', (error) => {
      console.error('‚ùå [Î∞±ÏóîÎìú] S3 Ïä§Ìä∏Î¶¨Î∞ç Ïò§Î•ò:', error);
      if (!res.headersSent) {
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] S3 ÌååÏùº Ïä§Ìä∏Î¶¨Î∞ç ÏãúÏûë: ${s3Key}`);
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] S3 ÌååÏùº Ïä§Ìä∏Î¶¨Î∞ç Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// S3 Presigned URL ÏÉùÏÑ± ÏóîÎìúÌè¨Ïù∏Ìä∏ (POSTÎ°ú Î≥ÄÍ≤Ω)
app.post('/api/s3/presigned-url', async (req, res) => {
  try {
    const { s3Key } = req.body;
    
    if (!s3Key) {
      return res.status(400).json({
        success: false,
        error: 'S3 ÌÇ§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§'
      });
    }
    const expiresIn = parseInt(req.body.expires) || 3600; // 1ÏãúÍ∞Ñ Í∏∞Î≥∏
    
    console.log(`üîó [Î∞±ÏóîÎìú] S3 Presigned URL ÏÉùÏÑ±: ${s3Key}`);
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // S3 Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const s3 = new AWS.S3({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      Bucket: process.env.REACT_APP_S3_BUCKET || 'aws-demo-factory',
      Key: s3Key,
      Expires: expiresIn
    };
    
    const presignedUrl = await s3.getSignedUrlPromise('getObject', params);
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] Presigned URL ÏÉùÏÑ± ÏÑ±Í≥µ: ${s3Key}`);
    
    res.json({
      success: true,
      url: presignedUrl,
      s3Key: s3Key,
      expiresIn: expiresIn
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] Presigned URL ÏÉùÏÑ± Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/api/analytics/track', async (req, res) => {
  try {
    console.log('üìä [Î∞±ÏóîÎìú] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏãúÏûë');
    
    const { eventType, data, timestamp } = req.body;
    
    if (!eventType || !data) {
      return res.status(400).json({
        success: false,
        error: 'Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖÍ≥º Îç∞Ïù¥ÌÑ∞Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§'
      });
    }
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const dynamoParams = {
      TableName: 'DemoFactoryAnalytics',
      Item: {
        id: `${eventType}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        eventType: eventType,
        data: data,
        timestamp: timestamp || new Date().toISOString(),
        date: new Date().toISOString().split('T')[0],
        createdAt: new Date().toISOString()
      }
    };
    
    await dynamodb.put(dynamoParams).promise();
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏÑ±Í≥µ: ${eventType}`);
    
    res.json({
      success: true,
      message: 'Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏÑ±Í≥µ',
      eventType: eventType
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/contents', async (req, res) => {
  try {
    console.log('üìÑ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå ÏãúÏûë');
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const params = {
      TableName: 'DemoFactoryContents'
    };
    
    const result = await dynamodb.scan(params).promise();
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ: ${result.Items.length}Í∞ú`);
    
    res.json({
      success: true,
      contents: result.Items,
      count: result.Items.length
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] ÏΩòÌÖêÏ∏† Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/analytics/data', async (req, res) => {
  try {
    console.log('üìä [Î∞±ÏóîÎìú] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏãúÏûë');
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // DynamoDB Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const dynamodb = new AWS.DynamoDB.DocumentClient({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    const { eventType, startDate, endDate } = req.query;
    
    let params = {
      TableName: 'DemoFactoryAnalytics'
    };
    
    // Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖÎ≥Ñ ÌïÑÌÑ∞ÎßÅ
    if (eventType) {
      params.FilterExpression = 'eventType = :eventType';
      params.ExpressionAttributeValues = {
        ':eventType': eventType
      };
    }
    
    // ÎÇ†Ïßú Î≤îÏúÑ ÌïÑÌÑ∞ÎßÅ (Ï∂îÌõÑ GSIÎ°ú Í∞úÏÑ† Í∞ÄÎä•)
    if (startDate || endDate) {
      let dateFilter = '';
      if (startDate && endDate) {
        dateFilter = '#date BETWEEN :startDate AND :endDate';
        params.ExpressionAttributeValues = {
          ...params.ExpressionAttributeValues,
          ':startDate': startDate,
          ':endDate': endDate
        };
      } else if (startDate) {
        dateFilter = '#date >= :startDate';
        params.ExpressionAttributeValues = {
          ...params.ExpressionAttributeValues,
          ':startDate': startDate
        };
      } else if (endDate) {
        dateFilter = '#date <= :endDate';
        params.ExpressionAttributeValues = {
          ...params.ExpressionAttributeValues,
          ':endDate': endDate
        };
      }
      
      if (params.FilterExpression) {
        params.FilterExpression += ' AND ' + dateFilter;
      } else {
        params.FilterExpression = dateFilter;
      }
      
      params.ExpressionAttributeNames = {
        '#date': 'date'
      };
    }
    
    const result = await dynamodb.scan(params).promise();
    
    console.log(`‚úÖ [Î∞±ÏóîÎìú] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ: ${result.Items.length}Í±¥`);
    
    res.json({
      success: true,
      data: result.Items,
      count: result.Items.length
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Î©îÏùº Î∞úÏÜ° API (AWS SES ÏÇ¨Ïö©) - server.jsÏóêÏÑú Î≥µÏÇ¨Ìïú ÏôÑÏ†ÑÌïú Î°úÏßÅ
app.post('/api/send-inquiry', async (req, res) => {
  try {
    console.log('üìß [Î∞±ÏóîÎìú] Î¨∏Ïùò Î©îÏùº Î∞úÏÜ° ÏãúÏûë');
    
    const { name, email, company, inquiryType, subject, message } = req.body;

    // ÏûÖÎ†• Í≤ÄÏ¶ù
    if (!name || !email || !subject || !message) {
      return res.status(400).json({
        status: 'error',
        message: 'ÌïÑÏàò Ìï≠Î™©Ïù¥ ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§.'
      });
    }

    // Î¨∏Ïùò Ïú†Ìòï ÌïúÍ∏Ä Î≥ÄÌôò
    const inquiryTypeMap = {
      'technical': 'Í∏∞Ïà† Î¨∏Ïùò',
      'pricing': 'Í∞ÄÍ≤© Î¨∏Ïùò',
      'demo': 'Îç∞Î™® ÏöîÏ≤≠',
      'partnership': 'ÌååÌä∏ÎÑàÏã≠ Î¨∏Ïùò',
      'other': 'Í∏∞ÌÉÄ'
    };

    const inquiryTypeKorean = inquiryTypeMap[inquiryType] || inquiryType || 'ÎØ∏ÏßÄÏ†ï';

    // HTML Ïù¥Î©îÏùº ÌÖúÌîåÎ¶ø (Ìëú ÌòïÏãù) - server.jsÏóêÏÑú Î≥µÏÇ¨
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background-color: #232F3E; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0;">AWS Demo Factory - ÏßÄÏõê Î¨∏Ïùò</h1>
        </div>
        
        <div style="padding: 20px; background-color: #f9f9f9;">
          <p style="font-size: 16px; color: #333;">ÏÉàÎ°úÏö¥ ÏßÄÏõê Î¨∏ÏùòÍ∞Ä Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.</p>
          
          <table style="width: 100%; border-collapse: collapse; background-color: white; margin: 20px 0;">
            <tr style="background-color: #f1f1f1;">
              <td style="padding: 12px; border: 1px solid #ddd; font-weight: bold; width: 30%;">Ìï≠Î™©</td>
              <td style="padding: 12px; border: 1px solid #ddd; font-weight: bold;">ÎÇ¥Ïö©</td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9;">Ïù¥Î¶Ñ</td>
              <td style="padding: 12px; border: 1px solid #ddd;">${name}</td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9;">Ïù¥Î©îÏùº</td>
              <td style="padding: 12px; border: 1px solid #ddd;"><a href="mailto:${email}">${email}</a></td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9;">ÌöåÏÇ¨Î™Ö</td>
              <td style="padding: 12px; border: 1px solid #ddd;">${company || 'ÎØ∏ÏûÖÎ†•'}</td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9;">Î¨∏Ïùò Ïú†Ìòï</td>
              <td style="padding: 12px; border: 1px solid #ddd;">${inquiryTypeKorean}</td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9;">Ï†úÎ™©</td>
              <td style="padding: 12px; border: 1px solid #ddd; font-weight: bold;">${subject}</td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9; vertical-align: top;">Î¨∏Ïùò ÎÇ¥Ïö©</td>
              <td style="padding: 12px; border: 1px solid #ddd; white-space: pre-wrap;">${message}</td>
            </tr>
            <tr>
              <td style="padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9;">Ï†ëÏàò ÏãúÍ∞Ñ</td>
              <td style="padding: 12px; border: 1px solid #ddd;">${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}</td>
            </tr>
          </table>
          
          <div style="margin-top: 20px; padding: 15px; background-color: #e8f4fd; border-left: 4px solid #2196F3;">
            <p style="margin: 0; color: #1976D2;">
              <strong>ÎãµÎ≥Ä Î∞©Î≤ï:</strong> ÏúÑ Ïù¥Î©îÏùº Ï£ºÏÜåÎ°ú ÏßÅÏ†ë ÎãµÎ≥ÄÌïòÏãúÎ©¥ Îê©ÎãàÎã§.
            </p>
          </div>
        </div>
        
        <div style="background-color: #232F3E; color: white; padding: 15px; text-align: center; font-size: 12px;">
          <p style="margin: 0;">AWS Demo Factory | Powered by Amazon Web Services</p>
        </div>
      </div>
    `;

    // ÌÖçÏä§Ìä∏ Î≤ÑÏ†Ñ (HTMLÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïö©)
    const textContent = `
AWS Demo Factory - ÏßÄÏõê Î¨∏Ïùò

ÏÉàÎ°úÏö¥ ÏßÄÏõê Î¨∏ÏùòÍ∞Ä Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.

=== Î¨∏Ïùò Ï†ïÎ≥¥ ===
Ïù¥Î¶Ñ: ${name}
Ïù¥Î©îÏùº: ${email}
ÌöåÏÇ¨Î™Ö: ${company || 'ÎØ∏ÏûÖÎ†•'}
Î¨∏Ïùò Ïú†Ìòï: ${inquiryTypeKorean}
Ï†úÎ™©: ${subject}
Ï†ëÏàò ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

=== Î¨∏Ïùò ÎÇ¥Ïö© ===
${message}

ÎãµÎ≥ÄÏùÄ ÏúÑ Ïù¥Î©îÏùº Ï£ºÏÜåÎ°ú ÏßÅÏ†ë Î≥¥ÎÇ¥Ï£ºÏãúÎ©¥ Îê©ÎãàÎã§.
    `;

    // AWS SES Ïù¥Î©îÏùº ÌååÎùºÎØ∏ÌÑ∞
    const params = {
      Source: process.env.SES_FROM_EMAIL || 'noreply@aws-demo-factory.com',
      Destination: {
        ToAddresses: ['janghwan@amazon.com']
      },
      Message: {
        Subject: {
          Data: `[AWS Demo Factory] ${inquiryTypeKorean} - ${subject}`,
          Charset: 'UTF-8'
        },
        Body: {
          Html: {
            Data: htmlContent,
            Charset: 'UTF-8'
          },
          Text: {
            Data: textContent,
            Charset: 'UTF-8'
          }
        }
      },
      ReplyToAddresses: [email]
    };

    // AWS SES Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± (AWS credentials ÏÇ¨Ïö©)
    const credentials = getAWSCredentials();
    const ses = new AWS.SES({
      region: process.env.AWS_REGION || 'ap-northeast-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey
    });
    
    // AWS SESÎ°ú Ïù¥Î©îÏùº Î∞úÏÜ°
    const result = await ses.sendEmail(params).promise();
    
    console.log('‚úÖ [Î∞±ÏóîÎìú] Î©îÏùº Î∞úÏÜ° ÏÑ±Í≥µ:', result.MessageId);

    res.json({
      status: 'success',
      message: 'Î¨∏ÏùòÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.',
      messageId: result.MessageId
    });

  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] AWS SES Î©îÏùº Î∞úÏÜ° Ïò§Î•ò:', error);
    
    // AWS SES ÌäπÏ†ï ÏóêÎü¨ Ï≤òÎ¶¨
    let errorMessage = 'Î©îÏùº Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
    
    if (error.code === 'MessageRejected') {
      errorMessage = 'Ïù¥Î©îÏùº Ï£ºÏÜåÍ∞Ä ÌôïÏù∏ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.';
    } else if (error.code === 'SendingPausedException') {
      errorMessage = 'Î©îÏùº Î∞úÏÜ°Ïù¥ ÏùºÏãú Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
    } else if (error.code === 'MailFromDomainNotVerifiedException') {
      errorMessage = 'Î∞úÏã† ÎèÑÎ©îÏù∏Ïù¥ ÌôïÏù∏ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.';
    }

    res.status(500).json({
      status: 'error',
      message: errorMessage,
      error: error.message
    });
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Backend API server running on port ${PORT}`);
  console.log(`üåê External access: http://0.0.0.0:${PORT}`);
});

module.exports = app;

// ÎåÄÏ≤¥ ÏóÖÎ°úÎìú ÏóîÎìúÌè¨Ïù∏Ìä∏ (CloudFront Ï∞®Îã® Ïö∞ÌöåÏö©)
app.post('/api/files/upload', upload.single('file'), async (req, res) => {
  console.log('üîÑ [Î∞±ÏóîÎìú] ÎåÄÏ≤¥ ÏóÖÎ°úÎìú ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©: /api/files/upload');
  
  try {
    console.log('üîí [Î∞±ÏóîÎìú] ÏïàÏ†ÑÌïú ÌååÏùº ÏóÖÎ°úÎìú ÏãúÏûë');
    
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'ÏóÖÎ°úÎìúÌï† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§'
      });
    }
    
    // AWS credentials Î°úÎìú
    const credentials = getAWSCredentials();
    
    // S3 Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    const s3 = new AWS.S3({
      region: process.env.REACT_APP_AWS_REGION || 'us-west-2',
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      sessionToken: credentials.sessionToken
    });
    
    // ÏïàÏ†ÑÌïú ÌååÏùºÎ™Ö ÏÉùÏÑ±
    const timestamp = Date.now();
    const safeFileName = req.file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');
    const fileExtension = path.extname(safeFileName);
    const baseName = path.basename(safeFileName, fileExtension);
    
    // ÎÇ†Ïßú Í∏∞Î∞ò Í≤ΩÎ°ú ÏÉùÏÑ±
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    
    // ÌååÏùº ÌÉÄÏûÖÏóê Îî∞Î•∏ Í≤ΩÎ°ú Î∂ÑÎ•ò
    let folder = 'documents';
    if (req.file.mimetype.startsWith('image/')) {
      folder = 'images';
    } else if (req.file.mimetype.startsWith('video/')) {
      folder = 'videos';
    } else if (req.file.mimetype.startsWith('audio/')) {
      folder = 'audio';
    }
    
    const s3Key = `contents/${folder}/${year}/${month}/${day}/${timestamp}-${baseName}${fileExtension}`;
    
    // S3Ïóê ÌååÏùº ÏóÖÎ°úÎìú
    const uploadParams = {
      Bucket: process.env.REACT_APP_S3_BUCKET || 'demo-factory-storage-bucket',
      Key: s3Key,
      Body: req.file.buffer,
      ContentType: req.file.mimetype,
      Metadata: {
        'original-name': req.file.originalname,
        'upload-timestamp': new Date().toISOString(),
        'content-id': req.body.contentId || 'unknown'
      }
    };
    
    console.log(`üìÅ [Î∞±ÏóîÎìú] S3 ÏóÖÎ°úÎìú ÏãúÏûë: ${s3Key}`);
    const uploadResult = await s3.upload(uploadParams).promise();
    
    // ÏóÖÎ°úÎìú ÏÑ±Í≥µ ÏùëÎãµ
    const fileInfo = {
      id: `file-${timestamp}`,
      name: req.file.originalname,
      safeName: `${baseName}${fileExtension}`,
      size: req.file.size,
      type: req.file.mimetype,
      s3Key: s3Key,
      s3Bucket: uploadParams.Bucket,
      url: uploadResult.Location,
      isSecure: true,
      uploadedAt: new Date().toISOString(),
      contentId: req.body.contentId || null
    };
    
    console.log('‚úÖ [Î∞±ÏóîÎìú] ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', fileInfo.name);
    
    res.json({
      success: true,
      file: fileInfo
    });
    
  } catch (error) {
    console.error('‚ùå [Î∞±ÏóîÎìú] ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå®:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});